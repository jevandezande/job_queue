#!/usr/bin/env python3

# import various programs here

import argparse
import subprocess
import logging
import os
import importlib

program_input_files = {
    "cfour": "ZMAT",
    "gamess": "input.inp",
    "molpro": "input.dat",
    "nwchem": "input.dat",
    "orca": "input.dat",
    "psi4": "input.dat",
    "qchem": "input.dat",
}


def qsub(sub_file):
    """
    Run SGE qsub command
    """
    qsub_cmd = "qsub {fsub_file}"
    result = subprocess.check_output(qsub_cmd, shell=True)
    print(result)


def read_args():
    parser = argparse.ArgumentParser(description="Submits a job to the queue")
    parser.add_argument("-i", "--input", help="The input file", type=str,
                        default="find")
    parser.add_argument("-p", "--program", help="The program to be run",
                        type=str, default="find")
    parser.add_argument("-n", "--name", help="Job name", type=str)
    parser.add_argument("-V", "--version", help="Version", type=str)

    return parser.parse_args()


def find_args(program="find", in_file="find"):
    """
    Find the appropriate program and/or input file
    :return: program, input file
    """
    if program == "find" and in_file == "find":
        logging.debug("No program or file given")
        # Look in various places
        for guess_in_file in ["input.inp", "input.dat", "ZMAT", "input.47"]:
            if os.path.isfile(in_file):
                guess_program = find_input_program(in_file)
                if guess_program is not None:
                    logging.debug(f"Found program: {guess_program}\n")
                    logging.debug(f"Found in_file: {guess_in_file}\n")
                    return guess_program, guess_in_file
        raise Exception("Could not find the appropriate input file.")
    elif program == "find":
        # Find program from input file name
        if not os.path.isfile(in_file):
            raise Exception("Could not find the specified input file.")

        guess_program = find_input_program(in_file)
        if guess_program is None:
            raise Exception("Could not find appropriate program.")
        return guess_program, in_file
    elif program in program_input_files:
        guess_in_file = program_input_files[program]
        if not os.isfile(guess_in_file):
            raise Exception(f"Cannot find input file for {program=}")

        guess_program = find_input_program(in_file)
        if guess_program is None:
            logging.debug("Cannot find program type, blindly trusting user.")
        elif program_input_files[guess_program] != in_file:
            raise Exception("Program does not match format of input file.")

        return program, guess_in_file
    else:
        # Must be unsupported program, or garbage
        raise Exception(f"{program} is not yet supported; please use one of the following programs\n"
                        "{', '.join(program_input_files)))}")


def check_in_file():
    return True


def run():
    args = read_args()
    program, in_file = find_args(args.program, args.in_file)
    check_in_file(in_file)
    mod = importlib.import_module(program)
    zsh_name = mod.write_zsh(args.version)
    qsub(zsh_name)
